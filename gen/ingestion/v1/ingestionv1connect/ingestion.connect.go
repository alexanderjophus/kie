// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ingestion/v1/ingestion.proto

package ingestionv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/alexanderjophus/kie/gen/ingestion/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// IngestionServiceName is the fully-qualified name of the IngestionService service.
	IngestionServiceName = "ingestion.v1.IngestionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IngestionServiceAddFileProcedure is the fully-qualified name of the IngestionService's AddFile
	// RPC.
	IngestionServiceAddFileProcedure = "/ingestion.v1.IngestionService/AddFile"
)

// IngestionServiceClient is a client for the ingestion.v1.IngestionService service.
type IngestionServiceClient interface {
	AddFile(context.Context, *connect_go.Request[v1.AddFileRequest]) (*connect_go.Response[v1.AddFileResponse], error)
}

// NewIngestionServiceClient constructs a client for the ingestion.v1.IngestionService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIngestionServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) IngestionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ingestionServiceClient{
		addFile: connect_go.NewClient[v1.AddFileRequest, v1.AddFileResponse](
			httpClient,
			baseURL+IngestionServiceAddFileProcedure,
			opts...,
		),
	}
}

// ingestionServiceClient implements IngestionServiceClient.
type ingestionServiceClient struct {
	addFile *connect_go.Client[v1.AddFileRequest, v1.AddFileResponse]
}

// AddFile calls ingestion.v1.IngestionService.AddFile.
func (c *ingestionServiceClient) AddFile(ctx context.Context, req *connect_go.Request[v1.AddFileRequest]) (*connect_go.Response[v1.AddFileResponse], error) {
	return c.addFile.CallUnary(ctx, req)
}

// IngestionServiceHandler is an implementation of the ingestion.v1.IngestionService service.
type IngestionServiceHandler interface {
	AddFile(context.Context, *connect_go.Request[v1.AddFileRequest]) (*connect_go.Response[v1.AddFileResponse], error)
}

// NewIngestionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIngestionServiceHandler(svc IngestionServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(IngestionServiceAddFileProcedure, connect_go.NewUnaryHandler(
		IngestionServiceAddFileProcedure,
		svc.AddFile,
		opts...,
	))
	return "/ingestion.v1.IngestionService/", mux
}

// UnimplementedIngestionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIngestionServiceHandler struct{}

func (UnimplementedIngestionServiceHandler) AddFile(context.Context, *connect_go.Request[v1.AddFileRequest]) (*connect_go.Response[v1.AddFileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ingestion.v1.IngestionService.AddFile is not implemented"))
}
